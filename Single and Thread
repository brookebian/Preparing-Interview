Singleton

public class Singleton{
    private Singleton singleton;
    private Singleton(){}// 私有构造函数
    public static Singleton getInstance(){
        if(singleton==null)
            singleton = new Singleton();
        return singleton;
    }
}

问提出现在多线程情况，多个线程同时发现singleton是null，会创建多个instance

1。synchronized 关键字

    1> 用synchronized锁住getInstance
        public static synchronized Singleton getInstance() 
        但是当有instance时候，读取也变成串行了
    2> 双锁
    if(singleton==null)｛
         synchronized(Singleton.Class){
            if(singleton==null) singleton = new Singleton(); //如果instance已经存在就不再new一遍
         }
    ｝
        问题是：
        1 给 singleton 分配内存
        2 调用 Singleton 的构造函数来初始化成员变量
        3 形成实例将singleton对象指向分配的内存空间（执行完这步 singleton才是非 null 了）
        但是在 JVM 的即时编译器中存在指令重排序的优化。也就是说上面的第二步和第三步的顺序是不能保证的，
        最终的执行顺序可能是 1-2-3 也可能是 1-3-2。如果是后者，则在 3 执行完毕、2 未执行之前，被线程二抢占了，
        这时 instance 已经是非 null 了（但却没有初始化），所以线程二会直接返回 instance，然后使用，然后顺理成章地报错。
    3> 把singleton声明成 volatile（取消指令重排序的优化）
        private volatile static Singleton singleton = null;
    4> SingletonHolder
        private static class SingletonHolder {
            private static final Singleton INSTANCE = new Singleton();
        }
        private Singleton (){}
        public static final Singleton getInstance() {
            return SingletonHolder.INSTANCE;
        }
            
        
    
